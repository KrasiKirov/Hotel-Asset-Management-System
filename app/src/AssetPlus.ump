class AssetPlus
{
  1 <@>- * User users;
  1 <@>- * Asset assets;
  1 <@>- * AssetType assetTypes;
  1 <@>- * HotelLocation locations;
}

// Location
class HotelLocation
{
  abstract;
  1 -- * Asset furnishing;
}

class HotelFloor
{
  isA HotelLocation;
  1 <@>- * HotelRoom rooms;
}

class HotelRoom
{
  isA HotelLocation;
  unique Integer roomNumber;
}


// User
class User 
{ 
  abstract;
  unique immutable email;
  password;
  lazy name;
  lazy phone;
  1 -- * MaintenanceTicket createdTickets;
}

class Staff
{
  abstract;
  isA User;
  1 -- * MaintenanceNote createdNotes;
}

class Manager
{
  isA Staff;
  defaulted password = "manager"; // allows easy reset when new manager
}

class Employee
{
  isA Staff;
}

class Guest
{
  isA User;
}

// Asset
class AssetType
{
  1 <@>- * Asset assets;
  Integer expectedLifespan; 
}

class Asset
{
  autounique id; // automatic Integer
  Date purchaseDate;
  1 <@>- * MaintenanceTicket maintenanceHistory;

}

// Maintenance
class MaintenanceTicket
{
  autounique id;
  Date creationDate;
  description;
  lazy String[] imageURLs; // doesn't make sense to make association with new class
  Boolean requiresManagerApproval;
  enum PriorityLevel {Urgent, Normal, Low};
  enum Status {Open, Resolved, Closed};

  enum TimeEstimate { LessThanADay, OneToThreeDays, ThreeToSevenDays, OneToThreeWeeks, MoreThanThreeWeeks }
  1 -- * Staff assignees;
  1 <@>- * MaintenanceNote notes; 
}

class MaintenanceNote
{
  description;
  Date date;
}